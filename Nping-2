package main

import (
	"fmt"
	"golang.org/x/crypto/ssh"
	"time"
)

func main() {
	const (
		routerUsername      = "your_username"
		routerPassword      = "your_password"
		routerIP            = "router_ip_address"
		otherRouterIP       = "other_router_ip_address"
		otherRouterInteface = "other_router_interface"
		pingCount           = 3
	)

	// Create SSH client configuration
	config := &ssh.ClientConfig{
		User: routerUsername,
		Auth: []ssh.AuthMethod{
			ssh.Password(routerPassword),
		},
		HostKeyCallback: ssh.InsecureIgnoreHostKey(), // Use only in testing, not recommended for production
	}

	// Connect to the router
	client, err := ssh.Dial("tcp", routerIP+":22", config)
	if err != nil {
		fmt.Println("Failed to dial router:", err)
		return
	}
	defer client.Close()

	// Create a session
	session, err := client.NewSession()
	if err != nil {
		fmt.Println("Failed to create session:", err)
		return
	}
	defer session.Close()

	// Construct Nping command
	npingCommand := fmt.Sprintf("nping -c %d --source-ip %s %s", pingCount, routerIP, otherRouterInteface)

	// Execute Nping command on the router
	npingOutput, err := session.CombinedOutput(npingCommand)
	if err != nil {
		fmt.Println("Failed to execute Nping command:", err)
		return
	}
	fmt.Println("Nping output:", string(npingOutput))

	fmt.Println("Nping traffic generation completed.")
}
